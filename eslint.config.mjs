// @ts-check

import assert from 'node:assert';

import {
  assertEnvironment,
  moduleExport
} from '@-xun/symbiote/assets/eslint.config.mjs';

import { createDebugLogger } from 'rejoinder';

const debug = createDebugLogger({ namespace: 'symbiote:config:eslint' });

const config = await moduleExport({
  derivedAliases: getEslintAliases(),
  ...(await assertEnvironment())
});

/* Add custom config objects here, such as those disabling certain rules */
config
  .push
  // ? Paths listed here are ignored by Eslint and related tooling.
  // { ignores: [] },
  // * Configs applying to both JavaScript & TypeScript files (all extensions)
  // ? Keep in mind that JS files can use @ts-check and "become" TS files,
  // ? hence the existence of this block. Logically, most rules should be
  // ? loaded here.
  // ...[
  //   { ...eslintPluginReactConfigs.flat.recommended, name: 'react:recommended' },
  //   // ? For react@>=17
  //   { ...eslintPluginReactConfigs.flat['jsx-runtime'], name: 'react:jsx-runtime' },
  //   {
  //     ...eslintPluginReactHooksConfigs['recommended-latest'],
  //     name: 'react-hooks:recommended-latest'
  //   },
  //   { ...eslintPluginJsxA11yFlatConfigs.recommended, name: 'jsx-a11y:recommended' }
  // ].flatMap((configs) =>
  //   overwriteProperty(configs, 'files', [
  //     `**/*.{ts,cts,mts,tsx}`
  //   ])
  // ),
  // {
  //   rules: {
  //     'unicorn/no-keyword-prefix': 'off',
  //     'no-restricted-syntax': 'off'
  //   }
  // }
  ();

// TODO: delete this the next time you see it (unless /test/fixtures/ still
// TODO: unwisely contains integration.ts)
assert(config[0]);
config[0].ignores = config[0].ignores?.filter((p) => !p.includes('/test/fixtures/'));
assert(config[0].ignores);

export default config;

debug('exported config: %O', config);

function getEslintAliases() {
  // ! These aliases are auto-generated by symbiote. Instead of modifying them
  // ! directly, consider regenerating aliases across the entire project with:
  // ! `npx symbiote project renovate --regenerate-assets --assets-preset ...`
  return [
    ['multiverse+backend:*', './packages/backend/src/*'],
    ['multiverse+shared:*', './packages/shared/src/*'],
    ['multiverse+backend', './packages/backend/src/index.ts'],
    ['multiverse+shared', './packages/shared/src/index.ts'],
    ['rootverse+backend:*', './packages/backend/*'],
    ['rootverse+shared:*', './packages/shared/*'],
    ['rootverse:*', './*'],
    ['universe+backend:*', './packages/backend/src/*'],
    ['universe+shared:*', './packages/shared/src/*'],
    ['universe+backend', './packages/backend/src/index.ts'],
    ['universe+shared', './packages/shared/src/index.ts'],
    ['universe:*', './src/*'],
    ['universe', './src/index.ts'],
    ['testverse+backend:*', './packages/backend/test/*'],
    ['testverse+shared:*', './packages/shared/test/*'],
    ['testverse:*', './test/*'],
    ['typeverse:*', './types/*']
  ];
}
